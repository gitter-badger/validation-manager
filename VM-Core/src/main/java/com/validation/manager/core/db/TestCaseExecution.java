/**
 * This file was generated by the Jeddict
 */
package com.validation.manager.core.db;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.codehaus.jackson.annotate.JsonIgnore;

/**
 *
 * @author Javier Ortiz Bultron <javier.ortiz.78@gmail.com>
 */
@Entity
@Table(name = "test_case_execution")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "TestCaseExecution.findAll",
            query = "SELECT t FROM TestCaseExecution t")
    , @NamedQuery(name = "TestCaseExecution.findById",
            query = "SELECT t FROM TestCaseExecution t WHERE t.id = :id")})
public class TestCaseExecution implements Serializable {

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "testCaseExecution")
    private List<ProjectHasTestCaseExecution> projectHasTestCaseExecutionList;

    @Column(name = "id")
    @Id
    @Basic(optional = false)
    @GeneratedValue(strategy = GenerationType.TABLE,
            generator = "TestCaseExecGen")
    @TableGenerator(name = "TestCaseExecGen", table = "vm_id",
            pkColumnName = "table_name",
            valueColumnName = "last_id",
            pkColumnValue = "test_case_execution",
            allocationSize = 1,
            initialValue = 1000)
    @NotNull
    private Integer id;

    @Column(name = "scope")
    @Lob
    @Basic
    @NotNull
    @Size(max = 2147483647)
    private String scope;

    @Column(name = "name")
    @Basic
    @NotNull
    private String name;

    @Column(name = "conclusion")
    @Lob
    @Basic
    @Size(max = 2147483647)
    private String conclusion;

    @OneToMany(cascade = {CascadeType.ALL}, targetEntity = ExecutionStep.class,
            mappedBy = "testCaseExecution")
    private List<ExecutionStep> executionStepList;

    @ManyToMany(targetEntity = Project.class, mappedBy = "testCaseExecutions")
    private List<Project> projects;

    public TestCaseExecution(String name, String scope) {
        this.name = name;
        this.scope = scope;
    }

    public TestCaseExecution() {
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getScope() {
        return this.scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getConclusion() {
        return this.conclusion;
    }

    public void setConclusion(String conclusion) {
        this.conclusion = conclusion;
    }

    public List<ExecutionStep> getExecutionStepList() {
        return this.executionStepList;
    }

    public void setExecutionStepList(List<ExecutionStep> executionStepList) {
        this.executionStepList = executionStepList;
    }

    public List<Project> getProjects() {
        return this.projects;
    }

    public void setProjects(List<Project> projects) {
        this.projects = projects;
    }

    @XmlTransient
    @JsonIgnore
    public List<ProjectHasTestCaseExecution> getProjectHasTestCaseExecutionList() {
        return projectHasTestCaseExecutionList;
    }

    public void setProjectHasTestCaseExecutionList(List<ProjectHasTestCaseExecution> projectHasTestCaseExecutionList) {
        this.projectHasTestCaseExecutionList = projectHasTestCaseExecutionList;
    }
}
