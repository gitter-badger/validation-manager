/**
 * This file was generated by the Jeddict
 */
package com.validation.manager.core.db;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.codehaus.jackson.annotate.JsonIgnore;

@Entity
@Table(name = "project")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Project.findAll",
            query = "SELECT p FROM Project p")
    , @NamedQuery(name = "Project.findById",
            query = "SELECT p FROM Project p WHERE p.id = :id")
    , @NamedQuery(name = "Project.findByName",
            query = "SELECT p FROM Project p WHERE p.name = :name")})
public class Project implements Serializable {

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "project")
    private List<ProjectHasTestCaseExecution> projectHasTestCaseExecutionList;

    @Column(name = "id")
    @Id
    @Basic(optional = false)
    @GeneratedValue(strategy = GenerationType.TABLE,
            generator = "ProjectGen")
    @TableGenerator(name = "ProjectGen", table = "vm_id",
            pkColumnName = "table_name",
            valueColumnName = "last_id",
            pkColumnValue = "project",
            allocationSize = 1,
            initialValue = 1000)
    @NotNull
    private Integer id;

    @Column(name = "name")
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    private String name;

    @Column(name = "notes")
    @Lob
    @Basic
    @Size(max = 65535)
    private String notes;

    @ManyToOne(targetEntity = Project.class)
    @JoinColumn(name = "parent_project_id", referencedColumnName = "id")
    private Project parentProjectId;

    @OneToMany(targetEntity = Project.class, mappedBy = "parentProjectId")
    private List<Project> projectList;

    @OneToMany(cascade = {CascadeType.ALL},
            targetEntity = RequirementSpec.class, mappedBy = "project")
    private List<RequirementSpec> requirementSpecList;

    @ManyToMany(targetEntity = TestProject.class)
    @JoinTable(name = "project_has_test_project", joinColumns = {
        @JoinColumn(name = "project_id", referencedColumnName = "id")},
            inverseJoinColumns = {
                @JoinColumn(name = "test_project_id",
                        referencedColumnName = "id")})
    private List<TestProject> testProjectList;

    @ManyToMany(targetEntity = TestCaseExecution.class)
    private List<TestCaseExecution> testCaseExecutions;

    public Project(String name) {
        this.name = name;
    }

    public Project() {
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNotes() {
        return this.notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Project getParentProjectId() {
        return this.parentProjectId;
    }

    public void setParentProjectId(Project parentProjectId) {
        this.parentProjectId = parentProjectId;
    }

    public List<Project> getProjectList() {
        return this.projectList;
    }

    public void setProjectList(List<Project> projectList) {
        this.projectList = projectList;
    }

    public List<RequirementSpec> getRequirementSpecList() {
        return this.requirementSpecList;
    }

    public void setRequirementSpecList(List<RequirementSpec> requirementSpecList) {
        this.requirementSpecList = requirementSpecList;
    }

    public List<TestProject> getTestProjectList() {
        return this.testProjectList;
    }

    public void setTestProjectList(List<TestProject> testProjectList) {
        this.testProjectList = testProjectList;
    }

    public List<TestCaseExecution> getTestCaseExecutions() {
        return this.testCaseExecutions;
    }

    public void setTestCaseExecutions(List<TestCaseExecution> testCaseExecutions) {
        this.testCaseExecutions = testCaseExecutions;
    }

    @XmlTransient
    @JsonIgnore
    public List<ProjectHasTestCaseExecution> getProjectHasTestCaseExecutionList() {
        return projectHasTestCaseExecutionList;
    }

    public void setProjectHasTestCaseExecutionList(List<ProjectHasTestCaseExecution> projectHasTestCaseExecutionList) {
        this.projectHasTestCaseExecutionList = projectHasTestCaseExecutionList;
    }

}
